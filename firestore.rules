rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function hasRole(role) {
      return isAuthenticated() && request.auth.token.role == role;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isManager() {
      return hasRole('manager');
    }

    function isCashier() {
      return hasRole('cashier');
    }

    function isCook() {
      return hasRole('cook');
    }

    function isClient() {
      return hasRole('client');
    }

    function isStaff() {
      return isManager() || isCashier() || isCook();
    }

    // Multi-tenant helper functions
    function isSuperAdmin() {
      return isAuthenticated() && request.auth.token.isSuperAdmin == true;
    }

    function getUserRestaurantId() {
      return request.auth.token.restaurantId;
    }

    function belongsToSameRestaurant(restaurantId) {
      return isAuthenticated() &&
             request.auth.token.restaurantId != null &&
             request.auth.token.restaurantId == restaurantId;
    }

    function isValidRestaurantId(restaurantId) {
      return restaurantId != null && restaurantId is string && restaurantId.size() > 0;
    }

    // RESTAURANTS COLLECTION
    // Super admins can manage all restaurants
    // Managers can read their own restaurant
    match /restaurants/{restaurantId} {
      allow read: if isSuperAdmin() || belongsToSameRestaurant(restaurantId);
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() ||
                       (isManager() && belongsToSameRestaurant(restaurantId) &&
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['branding', 'updatedAt'])); // Managers can only update branding
      allow delete: if isSuperAdmin();
    }

    // USERS COLLECTION
    // Multi-tenant: Users isolated by restaurantId
    // Only managers within the same restaurant can manage users
    // Users can update their own FCM token
    match /users/{userId} {
      // Users can read others in their restaurant, super admins can read all
      allow read: if isAuthenticated() &&
                     (isSuperAdmin() ||
                      belongsToSameRestaurant(resource.data.restaurantId));

      // Managers can create users in their restaurant, super admins can create in any
      allow create: if (isManager() &&
                        isValidRestaurantId(request.resource.data.restaurantId) &&
                        belongsToSameRestaurant(request.resource.data.restaurantId)) ||
                       isSuperAdmin();

      // Allow managers to update users in their restaurant
      // Allow users to update only their FCM token and related fields
      // Super admins can update anyone
      allow update: if isSuperAdmin() ||
                       (isManager() && belongsToSameRestaurant(resource.data.restaurantId)) ||
                       (isOwner(userId) &&
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['fcmToken', 'fcmTokenUpdatedAt']));

      // Only managers in same restaurant or super admins can delete
      allow delete: if isSuperAdmin() ||
                       (isManager() && belongsToSameRestaurant(resource.data.restaurantId));
    }

    // MENU COLLECTION (used by web app)
    // Multi-tenant: Menu items isolated by restaurantId
    // Public read within restaurant, only managers can write
    match /menu/{itemId} {
      allow read: if true; // Public menu for all visitors
      allow create: if isManager() &&
                       isValidRestaurantId(request.resource.data.restaurantId) &&
                       belongsToSameRestaurant(request.resource.data.restaurantId);
      allow update, delete: if isManager() &&
                               belongsToSameRestaurant(resource.data.restaurantId);
    }

    // MENU_ITEMS COLLECTION (legacy/alternative)
    // Multi-tenant: Menu items isolated by restaurantId
    // Public read within restaurant, only managers can write
    match /menu_items/{itemId} {
      allow read: if true; // Public menu for all visitors
      allow create: if isManager() &&
                       isValidRestaurantId(request.resource.data.restaurantId) &&
                       belongsToSameRestaurant(request.resource.data.restaurantId);
      allow update, delete: if isManager() &&
                               belongsToSameRestaurant(resource.data.restaurantId);
    }

    // ORDERS COLLECTION
    // Multi-tenant: Orders isolated by restaurantId
    match /orders/{orderId} {
      // Staff in same restaurant and order owner can read
      allow read: if isSuperAdmin() ||
                     (isStaff() && belongsToSameRestaurant(resource.data.restaurantId)) ||
                     (isClient() && resource.data.userId == request.auth.uid);

      // Staff can create orders in their restaurant
      // Clients can create orders with their restaurantId
      allow create: if (isStaff() &&
                        isValidRestaurantId(request.resource.data.restaurantId) &&
                        belongsToSameRestaurant(request.resource.data.restaurantId)) ||
                       (isClient() &&
                        request.resource.data.userId == request.auth.uid &&
                        isValidRestaurantId(request.resource.data.restaurantId) &&
                        belongsToSameRestaurant(request.resource.data.restaurantId));

      // Staff in same restaurant can update orders (status changes, assignments)
      // Clients can cancel their own orders if status is awaiting_approval or pending
      allow update: if isSuperAdmin() ||
                       (isStaff() && belongsToSameRestaurant(resource.data.restaurantId)) ||
                       (isClient() &&
                        resource.data.userId == request.auth.uid &&
                        belongsToSameRestaurant(resource.data.restaurantId) &&
                        (resource.data.status == 'awaiting_approval' || resource.data.status == 'pending') &&
                        request.resource.data.status == 'cancelled' &&
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'rejectionReason', 'updatedAt']) ||
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])));

      // Only managers in same restaurant can delete orders
      allow delete: if isSuperAdmin() ||
                       (isManager() && belongsToSameRestaurant(resource.data.restaurantId));
    }

    // CART COLLECTION (for offline sync)
    // Multi-tenant: Carts isolated by restaurantId
    match /carts/{userId} {
      allow read, write: if isOwner(userId) &&
                           (isSuperAdmin() ||
                            belongsToSameRestaurant(request.resource.data.restaurantId));
    }

    // NOTIFICATIONS COLLECTION
    // Multi-tenant: Notifications isolated by restaurantId
    match /notifications/{notifId} {
      allow read: if isSuperAdmin() ||
                     (isOwner(resource.data.userId) &&
                      belongsToSameRestaurant(resource.data.restaurantId));
      allow write: if isSuperAdmin() ||
                      (isOwner(request.resource.data.userId) &&
                       belongsToSameRestaurant(request.resource.data.restaurantId));
      allow delete: if isSuperAdmin() ||
                       (isOwner(resource.data.userId) &&
                        belongsToSameRestaurant(resource.data.restaurantId));
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
